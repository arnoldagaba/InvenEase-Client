import { zodResolver } from "@hookform/resolvers/zod";
import { Loader2, Plus } from "lucide-react";
import { useId, useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { useCreateUser } from "@/hooks/useUser";
import { emailSchema, passwordSchema } from "@/types/auth";
import { PasswordInput } from "../forms";
import {
	AlertDialog,
	AlertDialogAction,
	AlertDialogCancel,
	AlertDialogContent,
	AlertDialogDescription,
	AlertDialogFooter,
	AlertDialogHeader,
	AlertDialogTitle,
	AlertDialogTrigger,
} from "../ui/alert-dialog";
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import { Label } from "../ui/label";

const createUserSchema = z.object({
	email: emailSchema,
	password: passwordSchema,
	firstName: z.string().min(1, "First name is required"),
	lastName: z.string().min(1, "Last name is required"),
	roleId: z.string().min(1, "Role is required"),
});

type CreateUserForm = z.infer<typeof createUserSchema>;

export const CreateUserDialog = () => {
	const [open, setOpen] = useState(false);
	const createUserMutation = useCreateUser();

	const {
		register,
		handleSubmit,
		formState: { errors },
		reset,
		watch,
	} = useForm<CreateUserForm>({
		resolver: zodResolver(createUserSchema),
	});

	const password = watch("password");
	const onSubmit = async (data: CreateUserForm) => {
		try {
			await createUserMutation.mutateAsync({
				...data,
				isActive: true,
				lastLoginAt: null,
				role: { id: data.roleId, name: "User", permissions: [] }, // Default role
				id: "", // Will be generated by backend
				createdAt: new Date(),
				updatedAt: new Date(),
			});
			setOpen(false);
			reset();
		} catch (_error) {
			// Error is handled by the mutation
		}
	};

	const handleOpenChange = (newOpen: boolean) => {
		setOpen(newOpen);
		if (!newOpen) {
			reset();
		}
	};

	return (
		<AlertDialog open={open} onOpenChange={handleOpenChange}>
			<AlertDialogTrigger asChild>
				<Button className="flex items-center gap-2">
					<Plus className="h-4 w-4" />
					Add User
				</Button>
			</AlertDialogTrigger>
			<AlertDialogContent className="max-w-md">
				<AlertDialogHeader>
					<AlertDialogTitle>Create New User</AlertDialogTitle>
					<AlertDialogDescription>
						Add a new user to your team. They will receive an email invitation.
					</AlertDialogDescription>
				</AlertDialogHeader>

				<form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
					<div className="grid grid-cols-2 gap-4">
						<div className="space-y-2">
							<Label htmlFor="firstName">First Name</Label>
							<Input
								id={useId()}
								{...register("firstName")}
								placeholder="John"
								disabled={createUserMutation.isPending}
							/>
							{errors.firstName && (
								<p className="text-red-600 text-sm">
									{errors.firstName.message}
								</p>
							)}
						</div>
						<div className="space-y-2">
							<Label htmlFor="lastName">Last Name</Label>
							<Input
								id={useId()}
								{...register("lastName")}
								placeholder="Doe"
								disabled={createUserMutation.isPending}
							/>
							{errors.lastName && (
								<p className="text-red-600 text-sm">
									{errors.lastName.message}
								</p>
							)}
						</div>
					</div>

					<div className="space-y-2">
						<Label htmlFor="email">Email</Label>
						<Input
							id={useId()}
							type="email"
							{...register("email")}
							placeholder="john.doe@example.com"
							disabled={createUserMutation.isPending}
						/>
						{errors.email && (
							<p className="text-red-600 text-sm">{errors.email.message}</p>
						)}
					</div>

					<div className="space-y-2">
						<Label htmlFor="password">Password</Label>
						<PasswordInput
							{...register("password")}
							placeholder="••••••••"
							disabled={createUserMutation.isPending}
							showStrengthIndicator
							value={password || ""}
						/>
						{errors.password && (
							<p className="text-red-600 text-sm">{errors.password.message}</p>
						)}
					</div>

					<div className="space-y-2">
						<Label htmlFor="roleId">Role</Label>
						<select
							id={useId()}
							{...register("roleId")}
							className="w-full rounded-md border border-gray-300 px-3 py-2 focus:border-transparent focus:outline-none focus:ring-2 focus:ring-blue-500"
							disabled={createUserMutation.isPending}
						>
							<option value="">Select a role</option>
							<option value="user">User</option>
							<option value="manager">Manager</option>
							<option value="admin">Admin</option>
						</select>
						{errors.roleId && (
							<p className="text-red-600 text-sm">{errors.roleId.message}</p>
						)}
					</div>

					<AlertDialogFooter>
						<AlertDialogCancel disabled={createUserMutation.isPending}>
							Cancel
						</AlertDialogCancel>
						<AlertDialogAction
							type="submit"
							disabled={createUserMutation.isPending}
							className="flex items-center gap-2"
						>
							{createUserMutation.isPending && (
								<Loader2 className="h-4 w-4 animate-spin" />
							)}
							Create User
						</AlertDialogAction>
					</AlertDialogFooter>
				</form>
			</AlertDialogContent>
		</AlertDialog>
	);
};
